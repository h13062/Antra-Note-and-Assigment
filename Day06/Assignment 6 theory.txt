1. What are the six combinations of access modifier keywords and what do they do? 
	+public: A public member can be accessed from anywhere in the code, whether it is inside the same assembly
	+private:A private member can only be accessed within the same class or struct where it is declared. 
			 It is not visible to code outside the class or struct.
	+protected: A protected member can be accessed within the same class or struct, and in any derived class or struct. 
				It is not visible to code outside the class or struct hierarchy.
	+internal: An internal member can be accessed within the same assembly where it is declared, but not from code in a different assembly.
	+protected internal: A protected internal member can be accessed within the same assembly where it is declared, 
						as well as in any derived class or struct,
						even if it is in a different assembly.
	+private protected: A private protected member can be accessed within the same class or struct, 
						and in any derived class or struct that is declared in the same assembly as the containing class or struct. 
						It is not visible to code outside the assembly.
2.What is the difference between the static, const, and readonly keywords when applied to a type member?
	+A static member is associated with the type itself, rather than with instances of the type. 
	There is only one copy of a static member in memory, no matter how many instances of the type are created
	+A const member is a compile-time constant that cannot be changed once it is assigned. 
	+A readonly members are run-time constants that can be assigned a value either in the constructor or at the point of declaration
	and  are used to define constant values that cannot be changed
3. What does a constructor do?
4. Why is the partial keyword useful?
5. What is a tuple?
6. What does the C# record keyword do?
7. What does overloading and overriding mean?
8. What is the difference between a field and a property?
9. How do you make a method parameter optional?
10. What is an interface and how is it different from abstract class?
11. What accessibility level are members of an interface?
12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
15. True/False. Abstract methods can be used in a normal (non-abstract) class. 16.
True/False. Normal (non-abstract) methods can be used in an abstract class. 17. True/False.
Derived classes can override methods that were virtual in the base class. 18. True/False.
Derived classes can override methods that were abstract in the base class. 19. True/False.
In a derived class, you can override a method that was neither virtual non abstract in the
base class.
20. True/False. A class that implements an interface does not have to provide an
implementation for all of the members of the interface.
21. True/False. A class that implements an interface is allowed to have other members that
arenâ€™t defined in the interface.
22. True/False. A class can have more than one base class.
23. True/False. A class can implement more than one interface.What is meant by the terms managed resource and unmanaged resource in .NET
24. What's the purpose of Garbage Collector in .NET?