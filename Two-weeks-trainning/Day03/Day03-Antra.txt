Day 04
Topic:CLuster and non clustered, Constraint, Window function, View, SQL injection
+Concise but If ask about join ( explain many type of join ), leave an open end for interviewer to choose
+Delete cluster index -> click on key 
+ keyy need to live with index but does not need to be specify with index
+Clustered vs non clustered
	-non: store in hash extra storage- slower
	-cluster: binary search to get, dml slower but query faster 
+ Having and no index (need more digging)
	-Have no index: table scan -slower
	-Have index: index scan

+ Cannot put null to not null or other constraint 
	ex: insert Student(id, Name,age) values (1, 'Sam',25) // might get errors a default might also be trigger if created 
	ex: insert Student values (2, 'Bill',30, '12345678')
	ex:Creat Table Student(
		id int primary key identity(1//start with 1,1 //increament 1 to next id), //identity basically does not allow you input key but get assigned automatically, 
														//can only use once per creation and does not have to be primary key
		Name varchar(30) Not Null,
		age int check (age between 18 and 25),
		phone varchar(30)
	)

+Window function
	ex: Select SupplierId, Sum(UnitPrice) "Toatl UnitPrice from SupplierId"
		From Products
		Group By SupplierId
	+Using window function for query above by:
	ex: Select SupplierId, Sum(UnitPrice) Over()"Toatl UnitPrice from SupplierId"
		From Products
	+Allowing ranking function
		-Rank: when ranking, jump if there is a tirebreaker
		-Dense rank: number dont jump on ties
		-Row_Number: just counter by the row number
		-ex: Select p.ProductId, p. ProductName, p.UnitPrice,
			 Rank() Over(Order By UnitPrice ASC) "Rank"
			 Dense_Rank() Over(Order By UnitPrice ASC) "Dense"
			 Row_Number() Over(Order By UnitPrice ASC) 
			 From Products p
		-ex: Select c.ContactName, c.Country, Count(o.OrderID) NumofOrd
			Rank() Over(Partition By c.Country Order By Count(o.OrderID)) as "Rank"
			From Customer c Join Orders o on c.CustomerId = o.CustomerId
			GroupBy c.ContactName, c.Country
+View: Virtual table -- allow to store query to bring it up quickly
	+Updatable which also cause change to the table they are from
	+If the view uses multiple tables as a base, then it is not modifiable 
	ex: Create View vw_Product as(
		Select * From Products
		)
		Select * From vw_Product

+CTE (comment table expression) store in temporary database and will be delete shortly
	ex: with orderCTE()
		as (select count(o.orderID) "Total count",o.customerId
			from Orders o
			group by o.customerId 
			), usingOrderCTE as --nested CTE
			(select "Total count", CutomerID
			from: OrderCTE)
			select * from OrderCTE
	-Life time only after last statement (one query after first statement)
+Recusive CTEs (Union All is required)
	+Select * 
	 From vw_Hie
	 With EmpHieCte as
	 (
		Select EmployeeId, FirstName, reportTo, 1[level]
		From Employees
		Where ReportsTo Null
		Union All
		Select e.EmployeeId, e.FirstName, e.ReportsTo, Cte.[level] + 1
		From Employees e Join EmpHieCte cte on e.ReportsTo = cte.EmployeeId
		
	 )
	 Select * From EmpHieCte
+SQL Injection (Paramatizing your query)
	+Make sure parameterize you values