Console.WriteLine("Assignemnt 8!");

//1
public class MyStack<T> {
	private List<T> items;
	  public MyStack()
    {
        items = new List<T>();
    }
	public  Count(){
		return items.Count;
	}
	public T Pop(){
		if (items.Count == 0)
        {
           Console.Writelin("Stack is empty.");
        }
		T item = items.LastOrDefaults();
		items.RemoveAt(Count -1);
		return item;
	}
	public void Push(T item){
		items.Add(item)
	}
}
//2
public class MyList<T> {
	private List<T> items;
	  public MyList()
    {
        items = new List<T>();
    }
	public T Pop(){
		if (items.Count == 0)
        {
           Console.Writelin("Stack is empty.");
        }
		T item = items.LastOrDefaults();
		items.RemoveAt(Count -1);
		return item;
	}
	public void Push(T item){
		items.Add(item)
	}
	 public void Clear()
    {
        items.Clear();
    }
	 public bool Contains(T element)
    {
        return items.Contains(element);
    }
	   public void InsertAt(T element, int index)
    {
        if (index < 0 || index >= items.Count)
        {
            throw new IndexOutOfRangeException("Invalid index.");
        }

        items.Insert(index, element);
    }

    public void DeleteAt(int index)
    {
        if (index < 0 || index >= items.Count)
        {
            throw new IndexOutOfRangeException("Invalid index.");
        }

        items.RemoveAt(index);
    }
	 public T Find(int index)
    {
        if (index < 0 || index >= items.Count)
        {
            throw new IndexOutOfRangeException("Invalid index.");
        }

        return items[index];
    }

}
//3
public class GenericRepository<T> : IRepository<T> where T : class, IEntity
{
    private readonly IDbContext _dbContext;
    private readonly IDbSet<T> _dbSet;

    public GenericRepository(IDbContext dbContext)
    {
        _dbContext = dbContext;
        _dbSet = _dbContext.Set<T>();
    }

    public void Add(T item)
    {
        _dbSet.Add(item);
    }

    public void Remove(T item)
    {
        _dbSet.Remove(item);
    }

    public void Save()
    {
        _dbContext.SaveChanges();
    }

    public IEnumerable<T> GetAll()
    {
        return _dbSet.ToList();
    }

    public T GetById(int id)
    {
        return _dbSet.FirstOrDefault(e => e.Id == id);
    }
}
